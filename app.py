import streamlit as st
import pandas as pd
import os
import sys

# Adiciona o back-end ao sys.path
sys.path.append(os.path.join(os.path.dirname(__file__), "back_end"))

try:
    import main
except ImportError:
    st.warning("N√£o foi poss√≠vel importar main.py do back-end.")

try:
    import predictor_regre√ß√£o
except ImportError:
    st.warning("N√£o foi poss√≠vel importar predictor_regre√ß√£o.py do back-end.")

try:
    import predictor_calssifica√ß√£o
except ImportError:
    st.warning("N√£o foi poss√≠vel importar predictor_calssifica√ß√£o.py do back-end.")

st.set_page_config(page_title="Atena IA", page_icon="üß†", layout="wide")
st.title("üß† Atena IA ‚Äî An√°lise de Dados e Previs√µes")

# --- UPLOAD CSV ---
uploaded_file = st.file_uploader("Selecione um arquivo CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("üìä Pr√©-visualiza√ß√£o dos Dados")
    st.dataframe(df.head())

    # --- Rodar main.py automaticamente ---
    st.info("Executando pr√©-processamento...")
    if hasattr(main, "run_pipeline"):
        processed_data = main.run_pipeline(df)
    else:
        processed_data = df
    st.success("Pr√©-processamento conclu√≠do.")

    # --- Escolha tipo de an√°lise ---
    tipo_analise = st.radio("Tipo de An√°lise:", ["Regress√£o", "Classifica√ß√£o"], horizontal=True)

    # --- Tabela de par√¢metros edit√°vel ---
    st.subheader("üß© Par√¢metros para an√°lise (1 linha)")
    input_data = pd.DataFrame([{col: "" for col in df.columns}])
    edited_data = st.data_editor(input_data, num_rows="fixed", use_container_width=True, key="param_editor")
    st.write("Par√¢metros atuais:")
    st.dataframe(edited_data)

    # --- Bot√£o Analisar / Prever ---
    if st.button("üöÄ Analisar / Prever"):
        st.info(f"Rodando predi√ß√£o de {tipo_analise}...")
        if tipo_analise == "Regress√£o":
            if hasattr(predictor_regre√ß√£o, "predict"):
                resultado = predictor_regre√ß√£o.predict(edited_data)
                st.success("Regress√£o conclu√≠da!")
                st.dataframe(resultado)
            else:
                st.warning("Fun√ß√£o 'predict' n√£o encontrada no predictor de regress√£o.")
        else:
            if hasattr(predictor_calssifica√ß√£o, "predict"):
                resultado = predictor_calssifica√ß√£o.predict(edited_data)
                st.success("Classifica√ß√£o conclu√≠da!")
                st.dataframe(resultado)
            else:
                st.warning("Fun√ß√£o 'predict' n√£o encontrada no predictor de classifica√ß√£o.")
else:
    st.info("Fa√ßa upload de um arquivo CSV para iniciar a an√°lise.")
