import streamlit as st
import pandas as pd
import os
import sys

# Adiciona o diret√≥rio do projeto ao sys.path para imports locais
sys.path.append(os.path.dirname(__file__))

# Observa√ß√£o: fazemos importa√ß√µes tardias (dentro do bloco do bot√£o) para
# evitar erros/avisos no carregamento inicial do Streamlit quando depend√™ncias
# estiverem faltando ou modelos n√£o existirem.
main = None
predictor_regrecao = None
predictor_calssificacao = None

st.set_page_config(page_title="Atena IA", page_icon="üß†", layout="wide")
st.title("üß† Atena IA ‚Äî An√°lise de Dados e Previs√µes")

# --- UPLOAD CSV ---
uploaded_file = st.file_uploader("Selecione um arquivo CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("üìä Pr√©-visualiza√ß√£o dos Dados")
    st.dataframe(df.head())

    # --- Rodar main.py automaticamente ---
    st.info("Executando Treinamento de IA...")
    if hasattr(main, "run_pipeline"):
        processed_data = main.run_pipeline(df)
    else:
        processed_data = df
    st.success("Treinamento de IA conclu√≠do.")

    # --- Escolha tipo de an√°lise ---
    tipo_analise = st.radio("Tipo de An√°lise:", [
                            "Regress√£o", "Classifica√ß√£o"], horizontal=True)

    # --- Tabela de par√¢metros edit√°vel ---
    st.subheader("üß© Par√¢metros para an√°lise (1 linha)")
    input_data = pd.DataFrame([{col: "" for col in df.columns}])
    edited_data = st.data_editor(
        input_data, num_rows="fixed", use_container_width=True, key="param_editor")
    st.write("Par√¢metros atuais:")
    st.dataframe(edited_data)

    # --- Bot√£o Analisar / Prever ---
    if st.button("üöÄ Analisar / Prever"):
        st.info(f"Rodando predi√ß√£o de {tipo_analise}...")

        # Importa√ß√µes tardias com tratamento de erro claro
        if main is None:
            try:
                import main as _main
                main = _main
            except Exception:
                st.warning(
                    "N√£o foi poss√≠vel importar 'main'. Pr√©-processamento ser√° pulado.")

        if tipo_analise == "Regress√£o":
            try:
                import predictor_regrecao as predictor_regrecao
            except Exception as e:
                st.warning(
                    f"N√£o foi poss√≠vel importar o m√≥dulo de regress√£o: {type(e).__name__} {e}")
                predictor_regrecao = None

            if predictor_regrecao and hasattr(predictor_regrecao, "predict"):
                try:
                    resultado = predictor_regrecao.predict(edited_data)
                    st.success("Regress√£o conclu√≠da!")
                    st.dataframe(resultado)
                except FileNotFoundError as e:
                    st.error(f"Modelos n√£o encontrados: {e}")
                except Exception as e:
                    st.error(
                        f"Erro ao executar predi√ß√£o de regress√£o: {type(e).__name__} {e}")
            else:
                st.warning(
                    "Fun√ß√£o 'predict' n√£o encontrada no predictor de regress√£o.")
        else:
            try:
                import predictor_calssificacao as predictor_calssificacao
            except Exception as e:
                st.warning(
                    f"N√£o foi poss√≠vel importar o m√≥dulo de classifica√ß√£o: {type(e).__name__} {e}")
                predictor_calssificacao = None

            if predictor_calssificacao and hasattr(predictor_calssificacao, "predict"):
                try:
                    resultado = predictor_calssificacao.predict(edited_data)
                    st.success("Classifica√ß√£o conclu√≠da!")
                    # Exibir apenas a coluna de classe prevista e as probabilidades formatadas (_pct)
                    pct_cols = [
                        c for c in resultado.columns if c.endswith('_pct')]
                    display_cols = []
                    if 'predicao_classe' in resultado.columns:
                        display_cols.append('predicao_classe')
                    display_cols += pct_cols

                    # Exibir o DataFrame completo (valores brutos) diretamente
                    st.dataframe(resultado)
                except Exception as e:
                    st.error(
                        f"Erro ao executar predi√ß√£o de classifica√ß√£o: {type(e).__name__} {e}")
            else:
                st.warning(
                    "Fun√ß√£o 'predict' n√£o encontrada no predictor de classifica√ß√£o.")
else:
    st.info("Fa√ßa upload de um arquivo CSV para iniciar a an√°lise.")
